// Copyright 2015 The Project Buendia Authors
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License.  You may obtain a copy
// of the License at: http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distrib-
// uted under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
// OR CONDITIONS OF ANY KIND, either express or implied.  See the License for
// specific language governing permissions and limitations under the License.

import org.ajoberstar.grgit.Grgit

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.ajoberstar:gradle-git:0.8.0'
    }
}

apply plugin: 'com.android.application'
def appId = 'org.projectbuendia.client'
def debugAppIdSuffix = '.dev'
def contentAuthority = appId + '.provider'

android {
    dexOptions {
        preDexLibraries = false
        javaMaxHeapSize = '4g'
    }

    // Enable multidex support.
    defaultConfig {
        multiDexEnabled true
    }

    testOptions {
        // Prevents Log statements from killing unit tests.
        unitTests.returnDefaultValues = true
    }
}
dependencies {
    // Build plugins
    provided 'com.squareup.dagger:dagger-compiler:1.2.2' // Dependency injection

    // Local .jar dependencies
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // Local project dependencies
    compile project(':third_party:odkcollect')

    // External dependencies
    compile 'com.android.support:appcompat-v7:23.2.0'
    compile 'com.android.support:support-annotations:23.2.0'
    compile 'com.google.code.gson:gson:2.4' // JSON parser
    compile 'com.jakewharton:butterknife:5.1.2' // View injection
    compile 'com.mcxiaoke.volley:library:1.0.6' // HTTP framework
    compile 'com.joanzapata.android:android-iconify:1.0.8' // Font-based icons
    compile 'com.squareup.dagger:dagger:1.2.2' // Dependency injection
    compile 'de.greenrobot:eventbus:2.4.0' // The event bus
    compile 'joda-time:joda-time:2.5' // Better dates and times
    compile 'com.mitchellbosecke:pebble:1.5.1' // HTML templating
    compile 'org.slf4j:slf4j-simple:1.7.12' // HTML templating dependency
    compile 'org.apache.commons:commons-lang3:3.4'
    // Magic sliding panel that we use for the notes view.
    compile 'com.sothree.slidinguppanel:library:3.2.1'
    // We use this as a network base so we can use intercept network calls with Stetho on debug
    // builds.
    compile 'com.squareup.okhttp:okhttp:2.7.5'
    compile 'com.google.code.findbugs:jsr305:2.0.1' // Nullable annotations

    // Debug features only
    debugCompile 'com.facebook.stetho:stetho:1.2.0' // Handy debugging bridge
    debugCompile 'com.facebook.stetho:stetho-okhttp:1.2.0' // Network debugging

    // Unit tests (run locally on host machine)
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'

    // Instrumentation tests (run on a device or emulator)
    androidTestCompile 'com.android.support.test:runner:0.3'
    // Explicitly add this dep at 23.2.0, because the above entry depends on 22.2.0, and the
    // discrepancy can introduce differences in behaviour between prod and test.
    androidTestCompile 'com.android.support:support-annotations:23.2.0'
    // Espresso
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2'
    androidTestCompile 'com.android.support.test.espresso:espresso-web:2.2'
    // Mockito
    androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.0'
    androidTestCompile 'com.google.dexmaker:dexmaker:1.0'
    androidTestCompile 'org.mockito:mockito-core:1.9.5'

    // Multidex.
    // NOTE: This is temporary only! See https://slack-files.com/T02T5LNM4-F0JQ1UDRV-716ebe431f
    // for more information.
    compile 'com.android.support:multidex:1.0.1'
}

// Development builds get the lowest possible version code, so that any release
// build will be considered an upgrade over any development build.
def versionInteger = 0

// Development builds get a version name that identifies the commit.
def repo = Grgit.open(project.rootDir)
def versionString = repo.head().id.substring(0, 7) + (repo.status().clean ? '' : '+')

// For a release build, use -PversionNumber=1.2.3 to set the version number.
// It should have at most three parts, all numeric (e.g. 1, 1.2, or 1.2.3).
if (project.hasProperty('versionNumber')) {
    // The version number is converted to an integer for the version code,
    // e.g. 2.34.5 becomes 2340005.
    def versionParts = ((String) project.versionNumber).split('\\.').toList()
    assert versionParts.size >= 1 && versionParts.size() <= 3
    versionParts.addAll(['0', '0'])  // missing parts default to 0
    def versionMajor = versionParts[0].toInteger()
    def versionMinor = versionParts[1].toInteger()
    def versionPatch = versionParts[2].toInteger()
    assert versionMajor < 100
    assert versionMinor < 100
    assert versionPatch < 10000
    versionInteger = versionMajor * 1000000 + versionMinor * 10000 + versionPatch
    // Construct a normalized string for the version name, formatting integers
    // canonically and dropping trailing zeroes (e.g. '0.001.0' becomes '0.1').
    versionString = versionMajor + '.' + versionMinor + '.' + versionPatch;
    versionString = versionString.replaceAll('(\\.0)*$', '');
}
logger.info("Version number: ${versionString}")
logger.info("Version code: ${versionInteger}")

// OpenMRS server for development (kept at tip of dev branch).
def serverDev = 'dev.projectbuendia.org';

// Edison server on the local network.
//noinspection GroovyUnusedAssignment
def serverEdison = 'server';

// Host machine when client runs in an emulator (AVD).
//noinspection GroovyUnusedAssignment
def serverEmulatorHost = '10.0.2.2';

// If you run `adb reverse tcp:9000 tcp:9000` on your machine with a device connected, and
// use this setting, then the device will talk to a locally running server instance.
//noinspection GroovyUnusedAssignment
def serverLocalHost = '127.0.0.1';

// Just for development.  In production builds, these should be overridden
// using -Pserver=server -PopenmrsUser=user -PopenmrsPassword=pass etc.
def serverDefault = serverDev;
def openmrsRootUrlDefault = 'http://' + serverDefault + ':9000/openmrs';
def openmrsUserDefault = 'buendia'
def openmrsPasswordDefault = 'buendia'
def packageServerRootUrlDefault = 'http://' + serverDefault + ':9001';

// Apply overrides such as -Pserver=server -PrequireWifi=true etc.
project.metaClass.propertyMissing = { null }
def server = project.server ?: serverDefault;
def openmrsRootUrl = project.server ? 'http://' + project.server + ':9000/openmrs'
    : project.openmrsRootUrl ?: openmrsRootUrlDefault
def openmrsUser = project.openmrsUser ?: openmrsUserDefault
def openmrsPassword = project.openmrsPassword ?: openmrsPasswordDefault
def packageServerRootUrl = project.server ? 'http://' + project.server + ':9001'
    : project.packageServerRootUrl ?: packageServerRootUrlDefault
def requireWifi = project.requireWifi ?: 'false';

logger.info('Default server hostname: ${server}')
logger.info("Default OpenMRS root URL: ${openmrsRootUrl}")
logger.info("Default OpenMRS user: ${openmrsUser}")
logger.info("Default OpenMRS password: ${openmrsPassword}")
logger.info("Default package server root URL: ${packageServerRootUrl}")

android {
    compileSdkVersion 23
    // Make sure to change this version in .travis.yml as well.
    buildToolsVersion '23.0.2'
    // TODO: Port the various health checks to use HttpURLConnection instead and remove this
    // dependency.
    useLibrary 'org.apache.http.legacy'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    defaultConfig {
        applicationId appId
        minSdkVersion 19
        targetSdkVersion 23

        versionCode versionInteger
        versionName versionString
        resValue 'string', 'app_version', versionString

        // To run tests in Android Studio, you will need to open the run configuration
        // and select AndroidJUnitRunner as the "Specific instrumentation runner".
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
        testApplicationId appId + '.test'

        // Set the default values of preferences.
        // TODO: Make these build config values instead of resources.
        resValue 'string', 'server_default', server
        resValue 'string', 'openmrs_root_url_default', openmrsRootUrl
        resValue 'string', 'openmrs_user_default', openmrsUser
        resValue 'string', 'openmrs_password_default', openmrsPassword
        resValue 'string', 'package_server_root_url_default', packageServerRootUrl
        resValue 'bool', 'require_wifi_default', requireWifi
        resValue 'string', 'content_authority', contentAuthority
        buildConfigField 'String', 'CONTENT_AUTHORITY', '"' + contentAuthority + '"'
        resValue 'string', 'account_type', appId
        buildConfigField 'String', 'ACCOUNT_TYPE', '"' + appId + '"'
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/maven/com.google.guava/guava/pom.properties'
        exclude 'META-INF/maven/com.google.guava/guava/pom.xml'
    }

    lintOptions {
        lintConfig file('lint.xml')
        htmlReport false
    }

    buildTypes {
        debug {
            applicationIdSuffix debugAppIdSuffix
        }
    }
}
